<火山程序 类型 = "通常" 版本 = 1 />

包 火山.PIV扩展类 <注释 = "https://github.com/SaierMe/piv" "">

类 标准正则工具类 <公开 折叠 @文档 = "category = \"正则表达式\"" @全局类 = 真>
{
    方法 正则匹配到数组 <公开 静态 类型 = 整数 注释 = "如果有子匹配文本就把子匹配文本取出来,否则就把匹配的文本取出来." 返回值注释 = "返回匹配数量" 折叠 "">
    参数 要匹配的内容 <类型 = 文本型 注释 = "提供要匹配的内容">
    参数 正则表达式 <类型 = 文本型 注释 = "提供正则表达式文本">
    参数 匹配结果 <类型 = 二维文本数组类 注释 = "匹配结果放到此参数中">
    {
        变量 正则 <类型 = 正则表达式类>
        匹配结果.删除所有成员 ()
        如果 (正则.匹配 (要匹配的内容, 正则表达式) == 真)
        {
            循环判断首 ()
            {
                变量 索引 <类型 = 整数>
                变量 子匹配结果 <类型 = 文本数组类>
                循环 (1, 正则.取子匹配数量 (), 索引)
                {
                    子匹配结果.加入成员 (正则.取子匹配文本 (索引))

                }
                匹配结果.加入成员 (子匹配结果)

            }
            循环判断尾 (正则.到下一个匹配 () == 真)

        }
        返回 (匹配结果.取成员数 ())
    }

    方法 正则匹配到JSON数组 <公开 静态 类型 = 整数 注释 = "本方法可以将正则匹配结果,存储在JSON数组中." 返回值注释 = "返回匹配数量" 折叠>
    参数 要匹配的内容 <类型 = 文本型>
    参数 正则表达式 <类型 = 文本型 注释 = "提供正则表达式文本">
    参数 匹配结果 <类型 = PivOrderJSON 注释 = "存储匹配结果到本参数中">
    {
        变量 正则 <类型 = 正则表达式类>
        匹配结果.清空 ()
        如果 (正则.匹配 (要匹配的内容, 正则表达式) == 真)
        {
            循环判断首 ()
            {
                变量 索引 <类型 = 整数>
                变量 子匹配结果 <类型 = PivOrderJSON>
                循环 (1, 正则.取子匹配数量 (), 索引)
                {
                    子匹配结果.加入成员 (正则.取子匹配文本 (索引))

                }
                匹配结果.加入成员 (子匹配结果)

            }
            循环判断尾 (正则.到下一个匹配 () == 真)

        }
        返回 (匹配结果.取成员数 ())
    }
}

类 cookies生成类 <公开 折叠 @文档 = "category = \"网络辅助\"">
{
    变量 Cookie键值对 <类型 = 文本到文本哈希表>
    变量 Host <类型 = 文本型>
    变量 User_Agent <类型 = 文本型>

    方法 解析协议头 <公开 注释 = "从请求的协议头中获取本地Cookie、Host、User_Agent." 折叠>
    参数 协议头数据 <类型 = 字节集类>
    {
        变量 协议头信息 <类型 = 文本数组类>
        变量 数目 <类型 = 整数>
        变量 索引 <类型 = 整数>
        Cookie键值对.清空 ()
        数目 = 分割文本 (UTF8到文本 (协议头数据), "\r\n", 协议头信息)
        循环 (0, 数目, 索引, 1)
        {
            变量 当前文本 <类型 = 文本型>
            变量 Cookies字段 <类型 = 文本型>
            变量 Cookies键值 <类型 = 文本数组类>
            当前文本 = 协议头信息.取成员 (索引)
            如果 (是否以文本开头 (当前文本, "Cookie:", 假) == 真)
            {
                Cookies字段 = 当前文本
                删除字符 (Cookies字段, 0, 7)  // "Cookie:" 的长度
                变量 键值数 <类型 = 整数>
                变量 i <类型 = 整数>
                键值数 = 分割文本 (Cookies字段, ";", Cookies键值)
                循环 (0, 键值数, i, 1)
                {
                    变量 临时Cookie <类型 = 文本型>
                    变量 位置 <类型 = 整数>
                    临时Cookie = Cookies键值.取成员 (i)
                    位置 = 寻找字符 (临时Cookie, '=')
                    如果 (位置 != -1)
                    {
                        Cookie键值对.插入 (取文本左边 (临时Cookie, 位置), 取文本右边 (临时Cookie, 取文本长度 (临时Cookie) - 位置 - 1))
                    }

                }
            }
            如果 (是否以文本开头 (当前文本, "Host:", 假) == 真)
            {
                Host = 当前文本
                删除字符 (Host, 0, 5)  // "Host:" 的长度
                Host = 删首空 (Host)
            }
            如果 (是否以文本开头 (当前文本, "User-Agent:", 假) == 真)
            {
                User_Agent = 当前文本
                删除字符 (User_Agent, 0, 11)  // "User-Agent:" 的长度
                User_Agent = 删首空 (User_Agent)

            }

        }
    }

    方法 取cookie值 <公开 类型 = 文本型 注释 = "获取浏览器请求头里的Cookie值" 返回值注释 = "返回cookie值" 折叠>
    参数 cookie名称 <类型 = 文本型 注释 = "CookieName">
    {
        返回 (Cookie键值对.取值 (cookie名称))
    }

    方法 生成cookies <公开 类型 = 文本型 注释 = "如果要一次设置多个Cookie,可以生成多个cookie后加在协议头里." 返回值注释 = "返回Set-Cookie文本" 折叠>
    参数 cookie值 <类型 = 文本型 注释 = "以\"CookieName=CookieValue\"这样的方式填写">
    参数 到期时间 <类型 = 长整数 注释 = "Max-Age,单位为秒,会同时生成Expires值.如果设置0,则是关闭浏览器后即不再保留这个Cookie." @默认值 = 0>
    参数 安全协议 <类型 = 逻辑型 注释 = "Secure,只通过HTTPS协议发送Cookies." @默认值 = 假>
    参数 可供脚本使用 <类型 = 逻辑型 注释 = "HttpOnly,指定该Cookie能否被JavaScript脚本拿到." @默认值 = 真>
    参数 sameSite <类型 = 文本型 注释 = "  sameSite, 只可以填Strict、Lax、None 这三个值,留空则默认为Lax." @默认值 = 空对象>
    参数 路径 <类型 = 文本型 注释 = "  留空为当前的URL路径.指定浏览器发出HTTP请求时,哪些路径要附带这个Cookie."
            注释 = "  只要浏览器发现Path属性是HTTP请求路径的开头一部分,就会在头信息里面带上这个Cookie."
            注释 = "  比如,PATH属性是\"/\",那么请求\"/docs\"路径也会包含该Cookie." @默认值 = 空对象>
    参数 域名 <类型 = 文本型 注释 = "建议留空.默认是当前URL的一级域名,比如www.example.com会设为example.com.不能设置为其他域名,比如example.me"
            @默认值 = 空对象>
    {
        变量 Cookies文本 <类型 = 文本型>
        置文本预分配字符数 (Cookies文本, 512)
        加入文本 (Cookies文本, "Set-Cookie: " + cookie值 + ";")
        如果 (到期时间 != 0)
        {
            加入文本 (Cookies文本, " Max-Age=" + 到文本 (到期时间) + ";")
            变量 标准时间 <类型 = 标准时间类>
            标准时间.增减时间 (标准时间字段.秒, 到期时间)
            加入文本 (Cookies文本, " Expires=" + 标准时间.取格林威治时间 () + ";")

        }
        如果 (文本是否为空 (域名) == 假)
        {
            加入文本 (Cookies文本, " Domain=" + 域名 + ";")
        }
        如果 (文本是否为空 (路径) == 假)
        {
            加入文本 (Cookies文本, " Path=" + 路径 + ";")
        }
        如果 (文本是否为空 (sameSite) == 假)
        {
            如果 (文本比较 (sameSite, "strict", 假) == 0 || 文本比较 (sameSite, "lax", 假) == 0 || 文本比较 (sameSite, "none", 假) == 0)
            {
                加入文本 (Cookies文本, " sameSite=" + sameSite + ";")
            }
        }
        如果 (安全协议 == 真)
        {
            加入文本 (Cookies文本, " Secure;")
        }
        如果 (可供脚本使用 == 假)
        {
            加入文本 (Cookies文本, " HttpOnly")
        }
        删自身首尾空 (Cookies文本)
        如果 (是否以字符结束 (Cookies文本, ';', 真) == 真)
        {
            删除字符 (Cookies文本, 取文本长度 (Cookies文本) - 1, 1)
        }
        返回 (Cookies文本)
    }

    方法 生成session <公开 类型 = 文本型 注释 = "生成保存登录信息的session." 返回值注释 = "返回Set-Cookie文本" 折叠>
    参数 session值 <类型 = 文本型 注释 = "直接填写\"CookieValue\"即可">
    参数 session数据 <类型 = PivOrderJSON 注释 = "该参数保存生成的session数据,用来将Cookies和user_agent信息保存在服务器上.">
    参数 到期时间 <类型 = 长整数 注释 = "Max-Age,单位为秒.会同时生成Expires值.如果设置0,则是关闭浏览器后即不再保留这个Cookie." @默认值 = 0>
    参数 安全协议 <类型 = 逻辑型 注释 = "Secure,只通过HTTPS协议发送Cookies." @默认值 = 假>
    参数 可供脚本使用 <类型 = 逻辑型 注释 = "httpOnly,指定该Cookie能否被JavaScript脚本拿到." @默认值 = 真>
    参数 sameSite <类型 = 文本型 注释 = "  只可以填Strict、Lax、None 这三个值,留空则默认为Lax."
            注释 = "  Chrome 51开始,浏览器的Cookie新增加了一个SameSite属性,用来防止CSRF攻击和用户追踪." @默认值 = 空对象>
    参数 路径 <类型 = 文本型 注释 = "  留空为当前的URL路径.指定浏览器发出HTTP请求时,哪些路径要附带这个Cookie."
            注释 = "  只要浏览器发现Path属性是HTTP请求路径的开头一部分,就会在头信息里面带上这个Cookie."
            注释 = "  比如,PATH属性是\"/\",那么请求\"/docs\"路径也会包含该Cookie." @默认值 = 空对象>
    参数 域名 <类型 = 文本型 注释 = "建议留空.默认是当前URL的一级域名,比如www.example.com会设为example.com.不能设置为其他域名,比如example.me"
            @默认值 = 空对象>
    {
        变量 Cookies文本 <类型 = 文本型>
        变量 cookie <类型 = PivOrderJSON>
        置文本预分配字符数 (Cookies文本, 512)
        加入文本 (Cookies文本, "Set-Cookie: session=" + session值 + ";")
        如果 (到期时间 != 0)
        {
            加入文本 (Cookies文本, " Max-Age=" + 到文本 (到期时间) + ";")
            cookie.成员 ("originalMaxAge").置数值 (到期时间)
            变量 格林到期时间 <类型 = 文本型>
            变量 标准时间 <类型 = 标准时间类>
            标准时间.增减时间 (标准时间字段.秒, 到期时间)
            格林到期时间 = 标准时间.取格林威治时间 ()
            加入文本 (Cookies文本, " Expires=" + 格林到期时间 + ";")
            cookie.成员 ("expires").置文本 (格林到期时间)
        }
        如果 (安全协议 == 真)
        {
            加入文本 (Cookies文本, " Secure;")
            cookie.成员 ("secure").置逻辑 (真)
        }
        如果 (可供脚本使用 == 假)
        {
            加入文本 (Cookies文本, " HttpOnly")
            cookie.成员 ("httpOnly").置逻辑 (真)
        }
        如果 (文本是否为空 (域名) == 假)
        {
            加入文本 (Cookies文本, " Domain=" + 域名 + ";")
            cookie.成员 ("domain").置文本 (域名)
        }
        如果 (文本是否为空 (路径) == 假)
        {
            加入文本 (Cookies文本, " Path=" + 路径 + ";")
            cookie.成员 ("path").置文本 (路径)
        }
        如果 (文本是否为空 (sameSite) == 假)
        {
            如果 (文本比较 (sameSite, "strict", 假) == 0 || 文本比较 (sameSite, "lax", 假) == 0 || 文本比较 (sameSite, "none", 假) == 0)
            {
                加入文本 (Cookies文本, " sameSite=" + sameSite + ";")
                cookie.成员 ("sameSite").置文本 (sameSite)
            }
        }
        删自身首尾空 (Cookies文本)
        如果 (是否以字符结束 (Cookies文本, ';', 真) == 真)
        {
            删除字符 (Cookies文本, 取文本长度 (Cookies文本) - 1, 1)
        }
        session数据.成员 ("cookie").置值 (cookie)
        session数据.成员 ("origin").置文本 (Host)
        session数据.成员 ("user_agent").置文本 (User_Agent)
        返回 (Cookies文本)
    }

    方法 删除cookies <公开 类型 = 文本型 注释 = "删除指定名称的Cookie." 返回值注释 = "返回Set-Cookie文本" 折叠 编辑时信息 = "13104, 0, 0, 0">
    参数 cookie名称 <类型 = 文本型 注释 = "欲删除的cookie名称,比如\"CookieName\"" 编辑时信息 = "13104, 0, 0, 0">
    参数 路径 <类型 = 文本型 注释 = "  留空为当前的URL路径.指定浏览器发出HTTP请求时,哪些路径要附带这个Cookie."
            注释 = "  只要浏览器发现Path属性是HTTP请求路径的开头一部分,就会在头信息里面带上这个Cookie."
            注释 = "  比如,PATH属性是\"/\",那么请求\"/docs\"路径也会包含该Cookie." 编辑时信息 = "13104, 0, 0, 0" @默认值 = 空对象>
    参数 域名 <类型 = 文本型 注释 = "建议留空.默认是当前URL的一级域名,比如www.example.com会设为example.com.不能设置为其他域名,比如example.me"
            编辑时信息 = "13104, 0, 0, 0" @默认值 = 空对象>
    {
        变量 Cookies文本 <类型 = 文本型>
        置文本预分配字符数 (Cookies文本, 512)
        加入文本 (Cookies文本, "Set-Cookie: " + cookie名称 + "=null; Max-Age=0; expires=Thu, Jan 01 1970 00:00:00 GMT;")
        如果 (文本是否为空 (域名) == 假)
        {
            加入文本 (Cookies文本, " Domain=" + 域名 + ";")
        }
        如果 (文本是否为空 (路径) == 假)
        {
            加入文本 (Cookies文本, " Path=" + 路径 + ";")
        }
        删自身首尾空 (Cookies文本)
        如果 (是否以字符结束 (Cookies文本, ';', 真) == 真)
        {
            删除字符 (Cookies文本, 取文本长度 (Cookies文本) - 1, 1)
        }
        返回 (Cookies文本)
    }
}
